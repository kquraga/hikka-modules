from hikkatl.types import Message
from .. import loader, utils
import random
import time
import asyncio

@loader.tds
class DepModule(loader.Module):
    """–ò–≥—Ä–∞ '–î–µ–ø' - —É–¥–≤–æ–π –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–π"""
    strings = {
        "name": "–î–µ–ø",
        "dep_usage": "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π <code>.–¥–µ–ø <—Å—É–º–º–∞></code> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É",
        "balance": "üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}",
        "waiting": "‚è≥ –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {amount}. –†–æ—Å—Ç: {multiplier:.2f}\n{graph}",
        "win": "üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {multiplier:.2f}x –∏ –ø–æ–ª—É—á–∏–ª {amount}!",
        "lose": "üí• –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ü–æ—Ç–µ—Ä—è–Ω–æ: {amount}",
        "no_money": "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
        "min_bet": "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1",
        "timeout": "‚è± –í—Ä–µ–º—è –≤—ã—à–ª–æ! –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}",
        "money_returned": "üí∏ –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è",
        "graph_green": "üü©",  # –ó–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
        "graph_red": "üü•",  # –ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
        "graph_white": "‚¨ú",  # –ë–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç
        "max_candles": 10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        "max_multiplier": 15.0, # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        "bankrupt": [  # –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ
            "–¢—ã –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è!",
            "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –≤—Å–µ –¥–µ–Ω—å–≥–∏, –ø—Ä–∏–¥—É—Ä–æ–∫!",
            "–¢—ã –¥–µ–ø–Ω—É–ª —Ö–∞—Ç—É!",
            "–¢–µ–ø–µ—Ä—å —Ç—ã –±–æ–º–∂!",
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –¥–æ—Å—Ç–∏–≥ –¥–Ω–∞!",
        ],
        "sold_house": "üè† –¢—ã –ø—Ä–æ–¥–∞–ª –¥–æ–º –∑–∞ {amount}!",
        "sold_dacha": "üè° –¢—ã –ø—Ä–æ–¥–∞–ª –¥–∞—á—É –∑–∞ {amount}!",
        "sold_car": "üöó –¢—ã –ø—Ä–æ–¥–∞–ª –º–∞—à–∏–Ω—É –∑–∞ {amount}!",
        "no_property": "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç {property} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!",
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self._me = await client.get_me()
        self._games = {}  # {user_id: {"amount": int, "start_time": float, "multiplier": float, "message_id": int, "history": []}}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ (100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        if "balance" not in self._db.get(__name__, "data", {}):
            self._db.set(__name__, "data", {"balance": 100})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ª–∏—á–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞
        if "properties" not in self._db.get(__name__, "data", {}):
            self._db.set(__name__, "data", {"properties": {"house": True, "dacha": True, "car": True}})


    async def get_balance(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
        return self._db.get(__name__, "data", {}).get("balance", 50)

    async def set_balance(self, amount):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å"""
        data = self._db.get(__name__, "data", {})
        data["balance"] = amount
        self._db.set(__name__, "data", data)

    async def get_properties(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º—É—â–µ—Å—Ç–≤–µ"""
        return self._db.get(__name__, "data", {}).get("properties", {"house": True, "dacha": True, "car": True})

    async def set_properties(self, properties):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º—É—â–µ—Å—Ç–≤–µ"""
        data = self._db.get(__name__, "data", {})
        data["properties"] = properties
        self._db.set(__name__, "data", data)


    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å")
    async def –±–∞–ª–∞–Ω—Å(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
        balance = await self.get_balance()
        await utils.answer(message, self.strings("balance").format(balance=balance))

    @loader.command(ru_doc="<—Å—É–º–º–∞> - –∏–≥—Ä–∞ '–î–µ–ø'")
    async def –¥–µ–ø(self, message: Message):
        """[—Å—É–º–º–∞] - –∏–≥—Ä–∞ –î–µ–ø"""
        args = utils.get_args_raw(message)
        
        if not args:
            balance = await self.get_balance()
            await utils.answer(message, self.strings("balance").format(balance=balance))
            return
            
        if not args.isdigit():
            await utils.answer(message, self.strings("dep_usage"))
            return

        amount = int(args)
        
        if amount < 1:
            await utils.answer(message, self.strings("min_bet"))
            return
        
        current_balance = await self.get_balance()
        if amount > current_balance:
            await utils.answer(message, self.strings("no_money"))
            return

        await self.set_balance(current_balance - amount)

        msg = await utils.answer(
            message,
            self.strings("waiting").format(amount=amount, multiplier=1.0, graph="")
        )

        self._games[message.sender_id] = {
            "amount": amount,
            "start_time": time.time(),
            "multiplier": 1.0,
            "history": [],  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            "chat_id": message.chat_id,
            "message_id": msg.id,
        }

        asyncio.create_task(self.update_multiplier(message.sender_id))

    async def update_multiplier(self, user_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å, –≥—Ä–∞—Ñ–∏–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        game = self._games.get(user_id)
        if not game:
            return

        try:
            while True:
                await asyncio.sleep(1)  # –ò–∑–º–µ–Ω–µ–Ω–æ: –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é 1 —Å–µ–∫—É–Ω–¥—É

                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                previous_multiplier = game["multiplier"]

                # –®–∞–Ω—Å –ø–∞–¥–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è (50%)
                if random.random() < 0.5:
                    game["multiplier"] -= random.uniform(0.15, 0.35)  # –ò–∑–º–µ–Ω–µ–Ω–æ: –ë–æ–ª—å—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if game["multiplier"] < 0.0:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å 0
                        game["multiplier"] = 0.0
                else:
                    game["multiplier"] += random.uniform(0.15, 0.35)  # –ò–∑–º–µ–Ω–µ–Ω–æ: –ë–æ–ª—å—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    max_multiplier = self.strings("max_multiplier")
                    if game["multiplier"] > max_multiplier:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                        game["multiplier"] = max_multiplier

                if game["multiplier"] <= 0.0:  # –ü—Ä–æ–∏–≥—Ä—ã—à, –µ—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–ø–∞–ª –¥–æ 0
                    amount = game["amount"]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º amount –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–≥—Ä—ã
                    del self._games[user_id]
                    await self.safe_delete_message(game["chat_id"], game["message_id"])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                    current_balance = await self.get_balance()
                    if current_balance <= 0:
                        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ
                        bankrupt_messages = self.strings("bankrupt")
                        bankrupt_message = random.choice(bankrupt_messages)
                        await self._client.send_message(
                            game["chat_id"],
                            bankrupt_message
                        )
                    else:
                        await self._client.send_message(
                            game["chat_id"],
                            self.strings("lose").format(amount=amount) + f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {await self.get_balance():.2f}"
                        )
                    return

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è "—Å–≤–µ—á–∏"
                if game["multiplier"] > previous_multiplier:
                    candle_color = self.strings("graph_green")  # –ó–µ–ª–µ–Ω—ã–π, –µ—Å–ª–∏ –≤—ã—Ä–æ—Å
                elif game["multiplier"] < previous_multiplier:
                    candle_color = self.strings("graph_red")  # –ö—Ä–∞—Å–Ω—ã–π, –µ—Å–ª–∏ —É–ø–∞–ª
                else:
                    candle_color = self.strings("graph_white")  # –ë–µ–ª—ã–π, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è

                # –î–æ–±–∞–≤–ª—è–µ–º "—Å–≤–µ—á—É" –≤ –∏—Å—Ç–æ—Ä–∏—é
                game["history"].append(candle_color)

                # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                max_candles = self.strings("max_candles")
                if len(game["history"]) > max_candles:
                    game["history"] = game["history"][-max_candles:]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                graph = "".join(game["history"])  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã "—Å–≤–µ—á–µ–π"

                try:
                    await self._client.edit_message(
                        game["chat_id"],
                        game["message_id"],
                        self.strings("waiting").format(amount=game["amount"], multiplier=game["multiplier"], graph=graph)
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ update_multiplier: {e}")

    async def safe_delete_message(self, chat_id, message_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self._client.delete_messages(chat_id, message_id)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @loader.command(ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à")
    async def —Å—Ç–æ–ø(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –î–µ–ø"""
        user_id = message.sender_id
        game = self._games.get(user_id)
        if not game:
            await utils.answer(message, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã .–¥–µ–ø")
            return
        
        amount = game["amount"] # –°–æ—Ö—Ä–∞–Ω—è–µ–º amount –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–≥—Ä—ã

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
        del self._games[user_id]
        await self.safe_delete_message(game["chat_id"], game["message_id"])

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        win_amount = int(amount * game["multiplier"])
        current_balance = await self.get_balance()
        new_balance = current_balance + win_amount

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await self.set_balance(new_balance)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
        await utils.answer(
            message,
            self.strings("win").format(multiplier=game["multiplier"], amount=win_amount) + f"\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
        )

    @loader.command(ru_doc="–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º")
    async def –ø—Ä–æ–¥–∞—Ç—å_–¥–æ–º(self, message: Message):
        """–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"""
        properties = await self.get_properties()
        if not properties["house"]:
            await utils.answer(message, self.strings("no_property").format(property="–¥–æ–º"))
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        sale_amount = random.randint(1000, 3500)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        current_balance = await self.get_balance()
        await self.set_balance(current_balance + sale_amount)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –¥–æ–º–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç
        properties["house"] = False
        await self.set_properties(properties)
        
        await utils.answer(message, self.strings("sold_house").format(amount=sale_amount))


    @loader.command(ru_doc="–ü—Ä–æ–¥–∞—Ç—å –¥–∞—á—É")
    async def –ø—Ä–æ–¥–∞—Ç—å_–¥–∞—á—É(self, message: Message):
        """–ü—Ä–æ–¥–∞—Ç—å –¥–∞—á—É"""
        properties = await self.get_properties()
        if not properties["dacha"]:
            await utils.answer(message, self.strings("no_property").format(property="–¥–∞—á—É"))
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        sale_amount = random.randint(500, 1000)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        current_balance = await self.get_balance()
        await self.set_balance(current_balance + sale_amount)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –¥–∞—á–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç
        properties["dacha"] = False
        await self.set_properties(properties)
        
        await utils.answer(message, self.strings("sold_dacha").format(amount=sale_amount))

    @loader.command(ru_doc="–ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É")
    async def –ø—Ä–æ–¥–∞—Ç—å_–º–∞—à–∏–Ω—É(self, message: Message):
        """–ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É"""
        properties = await self.get_properties()
        if not properties["car"]:
            await utils.answer(message, self.strings("no_property").format(property="–º–∞—à–∏–Ω—É"))
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        sale_amount = random.randint(800, 2500)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        current_balance = await self.get_balance()
        await self.set_balance(current_balance + sale_amount)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –º–∞—à–∏–Ω—ã –±–æ–ª—å—à–µ –Ω–µ—Ç
        properties["car"] = False
        await self.set_properties(properties)
        
        await utils.answer(message, self.strings("sold_car").format(amount=sale_amount))


    async def watcher(self, message: Message):
        return