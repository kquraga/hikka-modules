from hikkatl.types import Message
from .. import loader, utils
import logging
import random
import time

logger = logging.getLogger(__name__)

@loader.tds
class CasinoModule(loader.Module):
    """–ö–∞–∑–∏–Ω–æ —Å —Ä—É–ª–µ—Ç–∫–æ–π, —Å–ª–æ—Ç–∞–º–∏, –∫—Ä–∏–ø—Ç–æ–π –∏ –±–∏–Ω–≥–æ"""
    strings = {
        "name": "–ö–∞–∑–∏–Ω–æ",
        "balance": "üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ",
        "work_success": "üõ† –í—ã {work_type} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <code>{amount}</code> ‚ÇΩ!\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "work_cooldown": "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ <code>{time}</code> –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã",
        "daily_reward": "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: <code>{amount}</code> ‚ÇΩ!\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "daily_already": "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è",
        "roulette_win": "üéâ –í—ã–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ <code>{number}</code>\n+<code>{amount}</code> ‚ÇΩ (√ó9)\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "roulette_lose": "üí• –ü—Ä–æ–∏–≥—Ä—ã—à. –í—ã–ø–∞–ª–æ <code>{number}</code>\n-<code>{amount}</code> ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "slots_win": "{slots}\n–í—ã–∏–≥—Ä—ã—à <code>{amount}</code> ‚ÇΩ (√ó{mult})\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "slots_lose": "{slots}\n–ü—Ä–æ–∏–≥—Ä—ã—à -<code>{amount}</code> ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "crypto_up": "üìà {coin} +{change}%\n–ü—Ä–∏–±—ã–ª—å: +<code>{amount}</code> ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "crypto_down": "üìâ {coin} -{change}%\n–£–±—ã—Ç–æ–∫: -<code>{amount}</code> ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "bingo_start": "üé´ –ë–∏–Ω–≥–æ! –°—Ç–∞–≤–∫–∞: <code>{bet}</code> ‚ÇΩ\n–ù–æ–º–µ—Ä–∞:\n{numbers}\n–ò—Å–ø–æ–ª—å–∑—É–π .–± –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∏—Å–ª–∞",
        "bingo_win": "üéâ –ë–∏–Ω–≥–æ! –í—ã–ø–∞–ª–æ <code>{number}</code> (–µ—Å—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ)\n–í—ã–∏–≥—Ä—ã—à: <code>{amount}</code> ‚ÇΩ (√ó{mult})\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "bingo_lose": "‚ùå –í—ã–ø–∞–ª–æ <code>{number}</code> (–Ω–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ)\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "bingo_full": "üèÜ –ü–æ–ª–Ω–æ–µ –±–∏–Ω–≥–æ! +<code>{amount}</code> ‚ÇΩ (√ó10)\n–ë–∞–ª–∞–Ω—Å: <code>{new_balance}</code>",
        "no_money": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ",
        "invalid_args": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
    }

    def __init__(self):
        self.db = None
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "START_BALANCE",
                1000,
                lambda: loader.validators.Integer(minimum=500)
            ),
            loader.ConfigValue(
                "WORK_MIN",
                100,
                lambda: loader.validators.Integer(minimum=50)
            ),
            loader.ConfigValue(
                "WORK_MAX",
                300,
                lambda: loader.validators.Integer(minimum=100)
            ),
            loader.ConfigValue(
                "WORK_COOLDOWN",
                10800,
                lambda: loader.validators.Integer(minimum=3600)
            ),
            loader.ConfigValue(
                "DAILY_MIN",
                150,
                lambda: loader.validators.Integer(minimum=50)
            ),
            loader.ConfigValue(
                "DAILY_MAX",
                500,
                lambda: loader.validators.Integer(minimum=100)
            )
        )
        self.jobs = [
            ("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∏", "üíª –ù–∞–ø–∏—Å–∞–ª–∏ –∫–æ–¥"),
            ("—Ç–æ—Ä–≥–æ–≤–∞–ª–∏", "üìà –ü—Ä–æ–¥–∞–ª–∏ –∞–∫—Ü–∏–∏"),
            ("–º–∞–π–Ω–∏–ª–∏", "‚õè –î–æ–±—ã–ª–∏ –∫—Ä–∏–ø—Ç—É")
        ]
        self.slots_symbols = ["üçí", "üçã", "üçä", "üçá", "üçâ", "7Ô∏è‚É£"]
        self.crypto_coins = ["BTC", "ETH", "DOGE", "SHIB", "SOL"]
        self.bingo_multipliers = {5: 2, 10: 5, 15: 10}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        if "casino" not in self._db:
            self._db.set("casino", "balance", self.config["START_BALANCE"])
            self._db.set("casino", "last_work", 0)
            self._db.set("casino", "last_daily", 0)
            self._db.set("casino", "bingo_game", None)

    async def get_balance(self) -> int:
        return self._db.get("casino", "balance", self.config["START_BALANCE"])

    async def set_balance(self, amount: int):
        self._db.set("casino", "balance", amount)

    async def update_balance(self, amount: int) -> int:
        balance = await self.get_balance()
        new_balance = max(0, balance + amount)
        await self.set_balance(new_balance)
        return new_balance

    @loader.command()
    async def –±–∞–ª–∞–Ω—Å(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
        balance = await self.get_balance()
        await utils.answer(message, self.strings["balance"].format(balance=balance))

    @loader.command()
    async def —Ä—É–ª–µ—Ç–∫–∞(self, message: Message):
        """<—Å—Ç–∞–≤–∫–∞> <—á–∏—Å–ª–æ 1-10> - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"""
        try:
            args = utils.get_args_raw(message).split()
            if len(args) != 2:
                await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .—Ä—É–ª–µ—Ç–∫–∞ <—Å—Ç–∞–≤–∫–∞> <1-10>")
                return

            bet, number = map(int, args)
            balance = await self.get_balance()

            if bet <= 0 or number < 1 or number > 10:
                await utils.answer(message, self.strings["invalid_args"])
                return
            if bet > balance:
                await utils.answer(message, self.strings["no_money"].format(balance=balance))
                return

            win_number = random.randint(1, 10)
            if number == win_number:
                win = bet * 9
                new_balance = await self.update_balance(win)
                await utils.answer(
                    message,
                    self.strings["roulette_win"].format(
                        number=win_number,
                        amount=win,
                        new_balance=new_balance
                    )
                )
            else:
                new_balance = await self.update_balance(-bet)
                await utils.answer(
                    message,
                    self.strings["roulette_lose"].format(
                        number=win_number,
                        amount=bet,
                        new_balance=new_balance
                    )
                )
        except Exception as e:
            logger.exception("Roulette error:")
            await utils.answer(message, self.strings["invalid_args"])

    @loader.command()
    async def —Å–ª–æ—Ç—ã(self, message: Message):
        """<—Å—Ç–∞–≤–∫–∞> - –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã"""
        try:
            bet = int(utils.get_args_raw(message))
            balance = await self.get_balance()

            if bet <= 0:
                await utils.answer(message, self.strings["invalid_args"])
                return
            if bet > balance:
                await utils.answer(message, self.strings["no_money"].format(balance=balance))
                return

            slots = [random.choice(self.slots_symbols) for _ in range(3)]
            unique = len(set(slots))
            slots_display = "|".join(slots)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "|"

            if unique == 1:  # 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
                mult = 10
            elif unique == 2:  # 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
                mult = 3
            else:
                mult = 0

            if mult > 0:
                win = bet * mult
                new_balance = await self.update_balance(win)
                await utils.answer(
                    message,
                    self.strings["slots_win"].format(
                        slots=slots_display,
                        amount=win,
                        mult=mult,
                        new_balance=new_balance
                    )
                )
            else:
                new_balance = await self.update_balance(-bet)
                await utils.answer(
                    message,
                    self.strings["slots_lose"].format(
                        slots=slots_display,
                        amount=bet,
                        new_balance=new_balance
                    )
                )
        except Exception as e:
            logger.exception("Slots error:")
            await utils.answer(message, self.strings["invalid_args"])

    @loader.command()
    async def –∫—Ä–∏–ø—Ç–∞(self, message: Message):
        """<—Å—É–º–º–∞> - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
        try:
            amount = int(utils.get_args_raw(message))
            balance = await self.get_balance()

            if amount <= 0:
                await utils.answer(message, self.strings["invalid_args"])
                return
            if amount > balance:
                await utils.answer(message, self.strings["no_money"].format(balance=balance))
                return

            coin = random.choice(self.crypto_coins)
            change = random.uniform(0.5, 2.0)
            profit = int(amount * change) - amount
            new_balance = await self.update_balance(profit)

            if profit >= 0:
                await utils.answer(
                    message,
                    self.strings["crypto_up"].format(
                        coin=coin,
                        change=int((change-1)*100),
                        amount=profit,
                        new_balance=new_balance
                    )
                )
            else:
                await utils.answer(
                    message,
                    self.strings["crypto_down"].format(
                        coin=coin,
                        change=int((1-change)*100),
                        amount=abs(profit),
                        new_balance=new_balance
                    )
                )
        except Exception as e:
            logger.exception("Crypto error:")
            await utils.answer(message, self.strings["invalid_args"])

    @loader.command()
    async def –±–∏–Ω–≥–æ(self, message: Message):
        """<—Å—Ç–∞–≤–∫–∞> - –ò–≥—Ä–∞ –≤ –±–∏–Ω–≥–æ"""
        try:
            bet = int(utils.get_args_raw(message))
            balance = await self.get_balance()

            if bet <= 0:
                await utils.answer(message, self.strings["invalid_args"])
                return
            if bet > balance:
                await utils.answer(message, self.strings["no_money"].format(balance=balance))
                return

            numbers = random.sample(range(1, 91), 15)
            await self.update_balance(-bet)
            
            self._db.set("casino", "bingo_game", {
                "bet": bet,
                "numbers": numbers,
                "matched": [],
                "drawn": []
            })

            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±–∏–Ω–≥–æ –±–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            card_rows = []
            for i in range(0, 15, 5):
                row = " ".join(f"{n:^3}" for n in numbers[i:i+5])
                card_rows.append(row)
            card = "\n".join(card_rows)

            await utils.answer(
                message,
                self.strings["bingo_start"].format(
                    bet=bet,
                    numbers=card
                )
            )
        except Exception as e:
            logger.exception("Bingo error:")
            await utils.answer(message, self.strings["invalid_args"])

    @loader.command()
    async def –±(self, message: Message):
        """–°–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –≤ –±–∏–Ω–≥–æ"""
        try:
            game = self._db.get("casino", "bingo_game")
            if not game:
                await utils.answer(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ: .–±–∏–Ω–≥–æ")
                return

            available = [n for n in range(1, 91) if n not in game["drawn"]]
            if not available:
                await utils.answer(message, "üé≤ –í—Å–µ —á–∏—Å–ª–∞ —É–∂–µ –≤—ã–ø–∞–ª–∏! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                self._db.set("casino", "bingo_game", None)
                return

            number = random.choice(available)
            game["drawn"].append(number)
            is_match = number in game["numbers"]
            balance = await self.get_balance()

            if is_match:
                game["matched"].append(number)
                matched_count = len(game["matched"])
                multiplier = next((mult for t, mult in sorted(self.bingo_multipliers.items(), reverse=True) if matched_count >= t), 1)
                
                win = game["bet"] * multiplier
                new_balance = await self.update_balance(win)
                self._db.set("casino", "bingo_game", game)

                if matched_count == 15:
                    await utils.answer(
                        message,
                        self.strings["bingo_full"].format(
                            amount=win,
                            new_balance=new_balance
                        )
                    )
                    self._db.set("casino", "bingo_game", None)
                else:
                    await utils.answer(
                        message,
                        self.strings["bingo_win"].format(
                            number=number,
                            amount=win,
                            mult=multiplier,
                            new_balance=new_balance
                        )
                    )
            else:
                await utils.answer(
                    message,
                    self.strings["bingo_lose"].format(
                        number=number,
                        new_balance=balance
                    )
                )
        except Exception as e:
            logger.exception("Bingo draw error:")
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def —Ä–∞–±–æ—Ç–∞(self, message: Message):
        """–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ (3—á –∫–¥)"""
        try:
            now = int(time.time())
            last_work = self._db.get("casino", "last_work", 0)
            
            if now - last_work < self.config["WORK_COOLDOWN"]:
                remaining = self.config["WORK_COOLDOWN"] - (now - last_work)
                await utils.answer(
                    message,
                    self.strings["work_cooldown"].format(
                        time=time.strftime("%H:%M:%S", time.gmtime(remaining))
                    )
                )
                return

            work_type, work_desc = random.choice(self.jobs)
            amount = random.randint(self.config["WORK_MIN"], self.config["WORK_MAX"])
            new_balance = await self.update_balance(amount)

            self._db.set("casino", "last_work", now)
            await utils.answer(
                message,
                self.strings["work_success"].format(
                    work_type=work_desc,
                    amount=amount,
                    new_balance=new_balance
                )
            )
        except Exception as e:
            logger.exception("Work error:")
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π(self, message: Message):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (24—á –∫–¥)"""
        try:
            now = int(time.time())
            last_daily = self._db.get("casino", "last_daily", 0)
            
            if now - last_daily < 86400:
                await utils.answer(message, self.strings["daily_already"])
                return

            amount = random.randint(self.config["DAILY_MIN"], self.config["DAILY_MAX"])
            new_balance = await self.update_balance(amount)

            self._db.set("casino", "last_daily", now)
            await utils.answer(
                message,
                self.strings["daily_reward"].format(
                    amount=amount,
                    new_balance=new_balance
                )
            )
        except Exception as e:
            logger.exception("Daily error:")
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def –∫–∞–∑–∏–Ω–æ(self, message: Message):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        balance = await self.get_balance()
        await utils.answer(
            message,
            f"üé∞ <b>–ö–∞–∑–∏–Ω–æ</b> | –ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n\n"
            "üéÆ <b>–ò–≥—Ä—ã</b>:\n"
            "‚Ä¢ <code>.—Ä—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] [1-10]</code> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ (√ó9)\n"
            "‚Ä¢ <code>.—Å–ª–æ—Ç—ã [—Å—Ç–∞–≤–∫–∞]</code> - –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã (√ó3/√ó10)\n"
            "‚Ä¢ <code>.–∫—Ä–∏–ø—Ç–∞ [—Å—É–º–º–∞]</code> - –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
            "‚Ä¢ <code>.–±–∏–Ω–≥–æ [—Å—Ç–∞–≤–∫–∞]</code> - –∏–≥—Ä–∞ –≤ –±–∏–Ω–≥–æ (√ó2-√ó10)\n\n"
            "üíº <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫</b>:\n"
            "‚Ä¢ <code>.—Ä–∞–±–æ—Ç–∞</code> - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (3—á –∫–¥)\n"
            "‚Ä¢ <code>.–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π</code> - –±–æ–Ω—É—Å (24—á –∫–¥)\n\n"
            "üí∞ <code>.–±–∞–ª–∞–Ω—Å</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            "üé≤ <code>.–±</code> - —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –≤ –ë–∏–Ω–≥–æ"
        )