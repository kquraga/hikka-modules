from .. import loader, utils
from ..inline.types import InlineCall
import asyncio
import logging
from telethon.tl.types import User

logger = logging.getLogger(__name__)

@loader.tds
class PublicScaryButtonMod(loader.Module):
    """–°—Ç—Ä–∞—à–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    strings = {
        "name": "ScaryButton",
        "start_text": "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!</b> ‚ö†Ô∏è",
        "button_text": "üö® –ù–ê–ñ–ú–ò –ú–ï–ù–Ø üö®",
        "alert_text": "üõë –í–ê–® –ê–ö–ö–ê–£–ù–¢ –ë–£–î–ï–¢ –£–î–ê–õ–Å–ù! üõë",
        "activated_text": "üíÄ <b>–°–ò–°–¢–ï–ú–ê –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</b> üíÄ",
        "cancel_text": "‚ùå –û–¢–ú–ï–ù–ê –ù–ï–í–û–ó–ú–û–ñ–ù–ê ‚ùå",
        "final_text": "üòÇ <b>–¢–í–û–ô –ê–ö–ö–ê–£–ù–¢ –ë–´–õ –£–°–ü–ï–®–ù–û –í–ó–õ–û–ú–ê–ù, {user}</b> üòÇ\n\n<i>–ñ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.</i>",
        "close_text": "üò° –û–ü–õ–ê–¢–ò–¢–¨ –í–û–ó–í–†–ê–©–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê",
        "error_text": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    }

    async def scarycmd(self, message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—à–Ω—É—é –∫–Ω–æ–ø–∫—É"""
        try:
            await self.inline.form(
                text=self.strings["start_text"],
                message=message,
                reply_markup=[
                    [
                        {
                            "text": self.strings["button_text"],
                            "callback": self.scary_callback,
                        }
                    ]
                ],
                force_me=False,
                disable_security=True,
                silent=True,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}")
            await utils.answer(message, self.strings["error_text"])

    async def scary_callback(self, call: InlineCall):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await self.client.get_entity(call.from_user.id)
            user_name = user.first_name if isinstance(user, User) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            threats = [
                "üö® –í–ê–® –ê–ö–ö–ê–£–ù–¢ –ë–£–î–ï–¢ –í–ó–õ–û–ú–ê–ù –ß–ï–†–ï–ó 5 –°–ï–ö–£–ù–î, –°–ü–ê–°–ò–ë–û –ó–ê –ü–û–î–ê–†–û–ö!",
                "üëπ –•–ê–ö–ï–†–´ –í–ó–õ–û–ú–ê–Æ–¢ –í–ê–® –¢–ï–õ–ï–ì–†–ê–ú!",
                "üíÄ –í–ê–®–ï –£–°–¢–†–û–ô–°–¢–í–û –ó–ê–†–ê–ñ–ï–ù–û –í–ò–†–£–°–û–ú!",
                "üëª –ü–†–ò–ó–†–ê–ö–ò –í –í–ê–®–ï–ú –¢–ï–õ–ï–§–û–ù–ï!",
                "üî• –°–ï–†–í–ï–† –¢–ï–õ–ï–ì–†–ê–ú–ê –ì–û–†–ò–¢ –ò–ó-–ó–ê –í–ê–°!",
                "‚ö†Ô∏è –ü–û–õ–ò–¶–ò–Ø –£–ñ–ï –í –ü–£–¢–ò!",
                "‚ò†Ô∏è –í–ê–® IP: 127.0.0.1... –ú–´ –ò–î–Å–ú –ö –í–ê–ú!",
                "üí£ –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –ù–ï–ò–ó–ë–ï–ñ–ù–û!"
            ]

            # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                await call.answer(self.strings["alert_text"], alert=True)
            except:
                pass

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.edit(
                text=self.strings["activated_text"],
                reply_markup=[
                    [
                        {
                            "text": self.strings["cancel_text"],
                            "callback": self.scary_callback,
                        }
                    ]
                ]
            )

            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑
            for threat in threats:
                try:
                    await call.answer(threat, show_alert=True)
                    await asyncio.sleep(1.5)
                except:
                    await asyncio.sleep(1.5)
                    continue

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await call.edit(
                text=self.strings["final_text"].format(user=user_name),
                reply_markup=[
                    [
                        {
                            "text": self.strings["close_text"],
                            "action": "close",
                        }
                    ]
                ]
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            try:
                await call.edit(self.strings["error_text"])
            except:
                pass